#!/usr/bin/env python

# Run this before you deploy it on replicate
import os
import sys
import torch
from controlnet_aux import OpenposeDetector
from diffusers import AutoencoderKL, DiffusionPipeline, ControlNetModel

# append project directory to path so predict.py can be imported
sys.path.append('.')
from predict import CONTROL_NAME, OPENPOSE_NAME, MODEL_NAME, SDXL_REFINER, CONTROL_CACHE, POSE_CACHE, MODEL_CACHE, REFINER_CACHE

# Make cache folders
if not os.path.exists(CONTROL_CACHE):
    os.makedirs(CONTROL_CACHE)

if not os.path.exists(POSE_CACHE):
    os.makedirs(POSE_CACHE)

if not os.path.exists(MODEL_CACHE):
    os.makedirs(MODEL_CACHE)

if not os.path.exists(REFINER_CACHE):
    os.makedirs(REFINER_CACHE)

openpose = OpenposeDetector.from_pretrained(
    CONTROL_NAME,
    cache_dir=CONTROL_CACHE,
)

controlnet = ControlNetModel.from_pretrained(
    OPENPOSE_NAME,
    torch_dtype=torch.float16
)
controlnet.save_pretrained(POSE_CACHE)


# Download SDXL-VAE-FP16-Fix
better_vae = AutoencoderKL.from_pretrained(
    "madebyollin/sdxl-vae-fp16-fix",
    torch_dtype=torch.float16,
)

# SD-XL-Base-1.0
pipe = DiffusionPipeline.from_pretrained(
    MODEL_NAME,
    vae=better_vae,
    torch_dtype=torch.float16,
    use_safetensors=True,
    variant="fp16",
)
pipe.save_pretrained(MODEL_CACHE, safe_serialization=True)

# SD-XL-Base-1.0 refiner
pipe = DiffusionPipeline.from_pretrained(
    SDXL_REFINER,
    torch_dtype=torch.float16,
    use_safetensors=True,
    variant="fp16",
)
pipe.save_pretrained(REFINER_CACHE, safe_serialization=True)
